name: CI

on:
  push:
    branches:
      - main
env:
  build_type: Debug

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install cmake
        run: |
          sudo apt-get update
          sudo apt-get install cmake
      - name: Build
        run: |
          cmake -B build -DENABLE_TESTS=OFF
          cmake --build build

  clang-format:  
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install clang-format
        run: |
          sudo apt-get update
          sudo apt-get install clang-format
      - name: Check format
        run: |
          format_output=$(find ./src ./libs -name '*.cpp' -o -name '*.hpp' | xargs clang-format --dry-run --Werror)
          if [[ $? -ne 0 ]]; then
            echo "$format_output"
            echo "::error file=FORMAT::Code is not formatted properly"
            exit 1
          fi

  clang-tidy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install cmake
        run: |
          sudo apt-get update
          sudo apt-get install cmake libgtest-dev libgmock-dev
      - name: Build
        run: |
          cmake -B build
          cmake --build build
      - name: Install clang-tidy
        run: |
          sudo apt-get update           
          sudo apt-get install clang-tidy
      - name: Run clang-tidy
        run: run-clang-tidy -p build

  test:
    permissions: write-all
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install cmake
        run: |
          sudo apt-get update
          sudo apt-get install cmake libgtest-dev libgmock-dev gcovr
      - name: Build
        run: |
          cmake -B build
          cmake --build build
      - name: Run tests
        run: |
          ctest --output-on-failure --repeat-until-fail 100 --test-dir ./build/
          gcovr -e '.*test*' --html --html-details -o coverage.html --print-summary --fail-under-line 80
        continue-on-error: false
      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html
                     